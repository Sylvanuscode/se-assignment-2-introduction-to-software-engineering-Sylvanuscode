1. Software Engineering:
   Definition: Software engineering is a systematic and disciplined approach to designing, developing, testing, and maintaining software. It aims to create high-quality, reliable, and maintainable software.
   Differences from Traditional Programming:
   Traditional programming often focuses on writing code to solve specific problems, whereas software engineering encompasses the entire software development process.
   Software engineering emphasizes systematic planning, requirements analysis, design, testing, and maintenance, whereas traditional programming may lack these structured phases.
2. Software Development Life Cycle (SDLC):
   SDLC represents the stages involved in software development. Key phases include:
   Requirements Gathering: Understanding user needs and defining system requirements.
   Design: Creating a high-level design, architecture, and detailed specifications.
   Implementation (Coding): Writing code based on design specifications.
   Testing: Verifying that the software meets requirements and identifying defects
   Deployment: Installing the software for users.
   Maintenance: Enhancing, fixing, and adapting the software over time.
3. Agile vs. Waterfall Models:
   Agile:
   Iterative and flexible approach
   Emphasizes collaboration, adaptability, and customer feedback
   Preferred for dynamic projects with evolving requirements
   Waterfall:
   Sequential and structured approach
   Phases follow a linear order (requirements, design, implementation, testing, deployment)
   Suitable for well-defined, stable projects
4. Requirements Engineering:
   Process: Gathering, analyzing, documenting, and validating user needs and system requirements.
   Importance: Accurate requirements ensure that the software meets user expectations and avoids costly changes later.
5. Software Design Principles:
   Modularity: Breaking down the system into smaller, independent components (modules)
   Improves maintainability: Easier to update or fix individual modules
   Enhances scalability: New features can be added without affecting the entire system
6. Testing in Software Engineering:
   Levels of Testing:
   Unit Testing: Testing individual components (functions, classes).
   Integration Testing: Testing interactions between components.
   System Testing: Testing the entire systemâ€™s functionality.
   Acceptance Testing: Ensuring the software meets user requirements.
   Importance: Testing identifies defects early, improves quality, and builds confidence in the software.
7. Version Control Systems (VCS):
   Definition: Tools for managing changes to source code.
   Importance: Tracks versions, facilitates collaboration, and prevents code conflicts.
   Examples: Git (distributed), SVN (centralized), Mercurial.
8. Software Project Management:
   Role of Project Manager:
   Planning, organizing, and executing software projects
   Managing resources, schedules, risks, and stakeholders
   Responsibilities and Challenges:
   Balancing scope, time, and cost
   Communication, team coordination, and risk mitigation.
9. Software Maintenance:
   Definition: Adapting, enhancing, and fixing software after deployment.
   Types of Maintenance:
   Corrective (bug fixes), Adaptive (environment changes), Perfective (enhancements), Preventive (anticipating issues)
   Importance: Ensures software remains relevant and functional over its lifecycle
10. Ethical Considerations in Software Engineering:
    Addressing ethical dilemmas related to privacy, security, bias, and societal impact.
    Responsible decision-making in software development
